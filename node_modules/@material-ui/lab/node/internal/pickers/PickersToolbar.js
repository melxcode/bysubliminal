"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var React = _interopRequireWildcard(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _styles = require("@material-ui/core/styles");

var _Pen = _interopRequireDefault(require("../svg-icons/Pen"));

var _Calendar = _interopRequireDefault(require("../svg-icons/Calendar"));

var _Clock = _interopRequireDefault(require("../svg-icons/Clock"));

var _jsxRuntime = require("react/jsx-runtime");

const styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
    padding: theme.spacing(2, 3)
  },
  toolbarLandscape: {
    height: 'auto',
    maxWidth: 160,
    padding: 16,
    justifyContent: 'flex-start',
    flexWrap: 'wrap'
  },
  dateTitleContainer: {
    flex: 1
  }
});

exports.styles = styles;

var _ref = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Clock.default, {
  color: "inherit"
});

var _ref2 = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Calendar.default, {
  color: "inherit"
});

const getViewTypeIcon = viewType => viewType === 'clock' ? _ref : _ref2;

function defaultGetKeyboardInputSwitchingButtonText(isKeyboardInputOpen, viewType) {
  return isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`;
}

var _ref3 = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Pen.default, {
  color: "inherit"
});

const PickerToolbar = props => {
  const {
    children,
    classes,
    className,
    getMobileKeyboardInputViewButtonText = defaultGetKeyboardInputSwitchingButtonText,
    isLandscape,
    isMobileKeyboardViewOpen,
    landscapeDirection = 'column',
    penIconClassName,
    toggleMobileKeyboardView,
    toolbarTitle,
    viewType = 'calendar'
  } = props;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: (0, _clsx.default)(classes.root, className, isLandscape && classes.toolbarLandscape),
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, {
      color: "textSecondary",
      variant: "overline",
      children: toolbarTitle
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Grid.default, {
      container: true,
      justifyContent: "space-between",
      className: classes.dateTitleContainer,
      direction: isLandscape ? landscapeDirection : 'row',
      alignItems: isLandscape ? 'flex-start' : 'flex-end',
      children: [children, /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        onClick: toggleMobileKeyboardView,
        className: penIconClassName,
        color: "inherit",
        "aria-label": getMobileKeyboardInputViewButtonText(isMobileKeyboardViewOpen, viewType),
        children: isMobileKeyboardViewOpen ? getViewTypeIcon(viewType) : _ref3
      })]
    })]
  });
};

var _default = (0, _styles.withStyles)(styles, {
  name: 'MuiPickersToolbar'
})(PickerToolbar);

exports.default = _default;