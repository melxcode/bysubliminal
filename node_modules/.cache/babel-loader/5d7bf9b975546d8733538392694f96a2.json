{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport { ResponsiveTooltipWrapper } from '../internal/pickers/wrappers/ResponsiveWrapper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { makeValidationHook } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from './DateRangePickerView';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { parseRangeInputValue, validateDateRange } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useDateRangeValidation = makeValidationHook(validateDateRange, {\n  isSameError: (a, b) => b !== null && a[1] === b[1] && a[0] === b[0]\n});\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://material-ui.com/api/date-range-picker/)\n */\n\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp = defaultMinDate,\n    maxDate: maxDateProp = defaultMaxDate\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"]);\n\n  const utils = useUtils();\n  const minDate = useParsedDate(minDateProp);\n  const maxDate = useParsedDate(maxDateProp);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(value, restProps);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(ResponsiveTooltipWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default \"CANCEL\"\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default \"CLEAR\"\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default \"@media (pointer: fine)\"\n   * @example \"@media (min-width: 720px)\" or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default \"OK\"\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://material-ui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default \"TODAY\"\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"–\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://material-ui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DateRangePicker;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/DateRangePicker/DateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","PropTypes","React","unstable_useThemeProps","useThemeProps","ResponsiveTooltipWrapper","useUtils","useParsedDate","defaultMinDate","defaultMaxDate","makeValidationHook","usePickerState","DateRangePickerView","DateRangePickerInput","parseRangeInputValue","validateDateRange","jsx","_jsx","useDateRangeValidation","isSameError","a","b","KeyboardDateInputComponent","PureDateInputComponent","rangePickerValueManager","emptyValue","parseInput","areValuesEqual","utils","isEqual","DateRangePicker","forwardRef","inProps","ref","props","name","calendars","value","onChange","mask","startText","endText","inputFormat","passedInputFormat","minDate","minDateProp","maxDate","maxDateProp","other","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","formats","keyboardDate","restProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowKeyboardControl","bool","allowSameDateSelection","oneOf","cancelText","node","className","string","clearable","clearText","components","shape","LeftArrowButton","elementType","LeftArrowIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","desktopModeMediaQuery","DialogProps","disableAutoMonthSwitching","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","InputProps","inputRef","oneOfType","current","key","number","label","leftArrowButtonText","loading","okText","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","openPickerIcon","orientation","PopperProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showTodayButton","showToolbar","todayText","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","TransitionComponent","arrayOf","Date"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport { ResponsiveTooltipWrapper } from '../internal/pickers/wrappers/ResponsiveWrapper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { makeValidationHook } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from './DateRangePickerView';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { parseRangeInputValue, validateDateRange } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useDateRangeValidation = makeValidationHook(validateDateRange, {\n  isSameError: (a, b) => b !== null && a[1] === b[1] && a[0] === b[0]\n});\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://material-ui.com/api/date-range-picker/)\n */\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp = defaultMinDate,\n    maxDate: maxDateProp = defaultMaxDate\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"]);\n\n  const utils = useUtils();\n  const minDate = useParsedDate(minDateProp);\n  const maxDate = useParsedDate(maxDateProp);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(value, restProps);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(ResponsiveTooltipWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default \"CANCEL\"\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default \"CLEAR\"\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default \"@media (pointer: fine)\"\n   * @example \"@media (min-width: 720px)\" or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default \"OK\"\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Popper props passed down to [Popper](https://material-ui.com/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default \"TODAY\"\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"–\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://material-ui.com/components/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DateRangePicker;"]},"metadata":{},"sourceType":"module"}