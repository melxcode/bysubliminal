{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport Collapse from '@material-ui/core/Collapse';\nimport { alpha, withStyles } from '@material-ui/core/styles';\nimport { ownerDocument, useForkRef, unsupportedProp } from '@material-ui/core/utils';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nimport { DescendantProvider, useDescendant } from '../TreeView/descendants';\nimport TreeItemContent from './TreeItemContent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    outline: 0\n  },\n\n  /* Styles applied to the transition component. */\n  group: {\n    margin: 0,\n    padding: 0,\n    marginLeft: 17\n  },\n\n  /* Styles applied to the content element. */\n  content: {\n    padding: '0 8px',\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    WebkitTapHighlightColor: 'transparent',\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&$disabled': {\n      opacity: theme.palette.action.disabledOpacity,\n      backgroundColor: 'transparent'\n    },\n    '&$focused': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&$selected': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n        }\n      },\n      '&$focused': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  },\n\n  /* Pseudo-class applied to the content element when expanded. */\n  expanded: {},\n\n  /* Pseudo-class applied to the content element when selected. */\n  selected: {},\n\n  /* Pseudo-class applied to the content element when focused. */\n  focused: {},\n\n  /* Pseudo-class applied to the element when disabled. */\n  disabled: {},\n\n  /* Styles applied to the tree node icon. */\n  iconContainer: {\n    marginRight: 4,\n    width: 15,\n    display: 'flex',\n    flexShrink: 0,\n    justifyContent: 'center',\n    '& svg': {\n      fontSize: 18\n    }\n  },\n\n  /* Styles applied to the label element. */\n  label: _extends({\n    width: '100%',\n    paddingLeft: 4,\n    position: 'relative'\n  }, theme.typography.body1)\n});\nconst TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    collapseIcon,\n    ContentComponent = TreeItemContent,\n    ContentProps,\n    endIcon,\n    expandIcon,\n    disabled: disabledProp,\n    icon,\n    id: idProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown,\n    TransitionComponent = Collapse,\n    TransitionProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"collapseIcon\", \"ContentComponent\", \"ContentProps\", \"endIcon\", \"expandIcon\", \"disabled\", \"icon\", \"id\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\", \"TransitionComponent\", \"TransitionProps\"]);\n\n  const {\n    icons: contextIcons = {},\n    focus,\n    isExpanded,\n    isFocused,\n    isSelected,\n    isDisabled,\n    multiSelect,\n    disabledItemsFocusable,\n    mapFirstChar,\n    unMapFirstChar,\n    registerNode,\n    unregisterNode,\n    treeId\n  } = React.useContext(TreeViewContext);\n  let id = null;\n\n  if (idProp != null) {\n    id = idProp;\n  } else if (treeId && nodeId) {\n    id = `${treeId}-${nodeId}`;\n  }\n\n  const [treeitemElement, setTreeitemElement] = React.useState(null);\n  const contentRef = React.useRef(null);\n  const handleRef = useForkRef(setTreeitemElement, ref);\n  const descendant = React.useMemo(() => ({\n    element: treeitemElement,\n    id: nodeId\n  }), [nodeId, treeitemElement]);\n  const {\n    index,\n    parentId\n  } = useDescendant(descendant);\n  const expandable = Boolean(Array.isArray(children) ? children.length : children);\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  let displayIcon;\n  let expansionIcon;\n\n  if (expandable) {\n    if (!expanded) {\n      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;\n    } else {\n      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;\n    }\n  }\n\n  if (expandable) {\n    displayIcon = contextIcons.defaultParentIcon;\n  } else {\n    displayIcon = endIcon || contextIcons.defaultEndIcon;\n  }\n\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (registerNode && unregisterNode && index !== -1) {\n      registerNode({\n        id: nodeId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled: disabledProp\n      });\n      return () => {\n        unregisterNode(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);\n  React.useEffect(() => {\n    if (mapFirstChar && unMapFirstChar && label) {\n      mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n      return () => {\n        unMapFirstChar(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [mapFirstChar, unMapFirstChar, nodeId, label]);\n  let ariaSelected;\n\n  if (multiSelect) {\n    ariaSelected = selected;\n  } else if (selected) {\n    /* single-selection trees unset aria-selected on un-selected items.\n     *\n     * If the tree does not support multiple selection, aria-selected\n     * is set to true for the selected node and it is not present on any other node in the tree.\n     * Source: https://www.w3.org/TR/wai-aria-practices/#TreeView\n     */\n    ariaSelected = true;\n  }\n\n  function handleFocus(event) {\n    // DOM focus stays on the tree which manages focus with aria-activedescendant\n    if (event.target === event.currentTarget) {\n      ownerDocument(event.target).getElementById(treeId).focus({\n        preventScroll: true\n      });\n    }\n\n    const unfocusable = !disabledItemsFocusable && disabled;\n\n    if (!focused && event.currentTarget === event.target && !unfocusable) {\n      focus(event, nodeId);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(\"li\", _extends({\n    className: clsx(classes.root, className),\n    role: \"treeitem\",\n    \"aria-expanded\": expandable ? expanded : null,\n    \"aria-selected\": ariaSelected,\n    \"aria-disabled\": disabled || null,\n    ref: handleRef,\n    id: id,\n    tabIndex: -1\n  }, other, {\n    onFocus: handleFocus,\n    children: [/*#__PURE__*/_jsx(ContentComponent, _extends({\n      ref: contentRef,\n      classes: {\n        root: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        focused: classes.focused,\n        disabled: classes.disabled,\n        iconContainer: classes.iconContainer,\n        label: classes.label\n      },\n      label: label,\n      nodeId: nodeId,\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      icon: icon,\n      expansionIcon: expansionIcon,\n      displayIcon: displayIcon\n    }, ContentProps)), children && /*#__PURE__*/_jsx(DescendantProvider, {\n      id: nodeId,\n      children: /*#__PURE__*/_jsx(TransitionComponent, _extends({\n        unmountOnExit: true,\n        className: classes.group,\n        in: expanded,\n        component: \"ul\",\n        role: \"group\"\n      }, TransitionProps, {\n        children: children\n      }))\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n\n  /**\n   * The component used for the content node.\n   * @default TreeItemContent\n   */\n  ContentComponent: elementTypeAcceptingRef,\n\n  /**\n   * Props applied to ContentComponent\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the node is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * This prop isn't supported.\n   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.\n   */\n  onFocus: unsupportedProp,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeItem'\n})(TreeItem);","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/TreeItem/TreeItem.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","clsx","PropTypes","elementTypeAcceptingRef","Collapse","alpha","withStyles","ownerDocument","useForkRef","unsupportedProp","TreeViewContext","DescendantProvider","useDescendant","TreeItemContent","jsx","_jsx","jsxs","_jsxs","styles","theme","root","listStyle","margin","padding","outline","group","marginLeft","content","width","display","alignItems","cursor","WebkitTapHighlightColor","backgroundColor","palette","action","hover","opacity","disabledOpacity","focus","primary","main","selectedOpacity","hoverOpacity","focusOpacity","expanded","selected","focused","disabled","iconContainer","marginRight","flexShrink","justifyContent","fontSize","label","paddingLeft","position","typography","body1","TreeItem","forwardRef","props","ref","children","classes","className","collapseIcon","ContentComponent","ContentProps","endIcon","expandIcon","disabledProp","icon","id","idProp","nodeId","onClick","onMouseDown","TransitionComponent","TransitionProps","other","icons","contextIcons","isExpanded","isFocused","isSelected","isDisabled","multiSelect","disabledItemsFocusable","mapFirstChar","unMapFirstChar","registerNode","unregisterNode","treeId","useContext","treeitemElement","setTreeitemElement","useState","contentRef","useRef","handleRef","descendant","useMemo","element","index","parentId","expandable","Boolean","Array","isArray","length","displayIcon","expansionIcon","defaultExpandIcon","defaultCollapseIcon","defaultParentIcon","defaultEndIcon","useEffect","idAttribute","undefined","current","textContent","substring","toLowerCase","ariaSelected","handleFocus","event","target","currentTarget","getElementById","preventScroll","unfocusable","role","tabIndex","onFocus","unmountOnExit","in","component","process","env","NODE_ENV","propTypes","node","object","string","bool","isRequired","func","elementType","name"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport Collapse from '@material-ui/core/Collapse';\nimport { alpha, withStyles } from '@material-ui/core/styles';\nimport { ownerDocument, useForkRef, unsupportedProp } from '@material-ui/core/utils';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nimport { DescendantProvider, useDescendant } from '../TreeView/descendants';\nimport TreeItemContent from './TreeItemContent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    outline: 0\n  },\n\n  /* Styles applied to the transition component. */\n  group: {\n    margin: 0,\n    padding: 0,\n    marginLeft: 17\n  },\n\n  /* Styles applied to the content element. */\n  content: {\n    padding: '0 8px',\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    WebkitTapHighlightColor: 'transparent',\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&$disabled': {\n      opacity: theme.palette.action.disabledOpacity,\n      backgroundColor: 'transparent'\n    },\n    '&$focused': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&$selected': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n        }\n      },\n      '&$focused': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  },\n\n  /* Pseudo-class applied to the content element when expanded. */\n  expanded: {},\n\n  /* Pseudo-class applied to the content element when selected. */\n  selected: {},\n\n  /* Pseudo-class applied to the content element when focused. */\n  focused: {},\n\n  /* Pseudo-class applied to the element when disabled. */\n  disabled: {},\n\n  /* Styles applied to the tree node icon. */\n  iconContainer: {\n    marginRight: 4,\n    width: 15,\n    display: 'flex',\n    flexShrink: 0,\n    justifyContent: 'center',\n    '& svg': {\n      fontSize: 18\n    }\n  },\n\n  /* Styles applied to the label element. */\n  label: _extends({\n    width: '100%',\n    paddingLeft: 4,\n    position: 'relative'\n  }, theme.typography.body1)\n});\nconst TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    collapseIcon,\n    ContentComponent = TreeItemContent,\n    ContentProps,\n    endIcon,\n    expandIcon,\n    disabled: disabledProp,\n    icon,\n    id: idProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown,\n    TransitionComponent = Collapse,\n    TransitionProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"collapseIcon\", \"ContentComponent\", \"ContentProps\", \"endIcon\", \"expandIcon\", \"disabled\", \"icon\", \"id\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\", \"TransitionComponent\", \"TransitionProps\"]);\n\n  const {\n    icons: contextIcons = {},\n    focus,\n    isExpanded,\n    isFocused,\n    isSelected,\n    isDisabled,\n    multiSelect,\n    disabledItemsFocusable,\n    mapFirstChar,\n    unMapFirstChar,\n    registerNode,\n    unregisterNode,\n    treeId\n  } = React.useContext(TreeViewContext);\n  let id = null;\n\n  if (idProp != null) {\n    id = idProp;\n  } else if (treeId && nodeId) {\n    id = `${treeId}-${nodeId}`;\n  }\n\n  const [treeitemElement, setTreeitemElement] = React.useState(null);\n  const contentRef = React.useRef(null);\n  const handleRef = useForkRef(setTreeitemElement, ref);\n  const descendant = React.useMemo(() => ({\n    element: treeitemElement,\n    id: nodeId\n  }), [nodeId, treeitemElement]);\n  const {\n    index,\n    parentId\n  } = useDescendant(descendant);\n  const expandable = Boolean(Array.isArray(children) ? children.length : children);\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const focused = isFocused ? isFocused(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n  const disabled = isDisabled ? isDisabled(nodeId) : false;\n  let displayIcon;\n  let expansionIcon;\n\n  if (expandable) {\n    if (!expanded) {\n      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;\n    } else {\n      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;\n    }\n  }\n\n  if (expandable) {\n    displayIcon = contextIcons.defaultParentIcon;\n  } else {\n    displayIcon = endIcon || contextIcons.defaultEndIcon;\n  }\n\n  React.useEffect(() => {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (registerNode && unregisterNode && index !== -1) {\n      registerNode({\n        id: nodeId,\n        idAttribute: id,\n        index,\n        parentId,\n        expandable,\n        disabled: disabledProp\n      });\n      return () => {\n        unregisterNode(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);\n  React.useEffect(() => {\n    if (mapFirstChar && unMapFirstChar && label) {\n      mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n      return () => {\n        unMapFirstChar(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [mapFirstChar, unMapFirstChar, nodeId, label]);\n  let ariaSelected;\n\n  if (multiSelect) {\n    ariaSelected = selected;\n  } else if (selected) {\n    /* single-selection trees unset aria-selected on un-selected items.\n     *\n     * If the tree does not support multiple selection, aria-selected\n     * is set to true for the selected node and it is not present on any other node in the tree.\n     * Source: https://www.w3.org/TR/wai-aria-practices/#TreeView\n     */\n    ariaSelected = true;\n  }\n\n  function handleFocus(event) {\n    // DOM focus stays on the tree which manages focus with aria-activedescendant\n    if (event.target === event.currentTarget) {\n      ownerDocument(event.target).getElementById(treeId).focus({\n        preventScroll: true\n      });\n    }\n\n    const unfocusable = !disabledItemsFocusable && disabled;\n\n    if (!focused && event.currentTarget === event.target && !unfocusable) {\n      focus(event, nodeId);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(\"li\", _extends({\n    className: clsx(classes.root, className),\n    role: \"treeitem\",\n    \"aria-expanded\": expandable ? expanded : null,\n    \"aria-selected\": ariaSelected,\n    \"aria-disabled\": disabled || null,\n    ref: handleRef,\n    id: id,\n    tabIndex: -1\n  }, other, {\n    onFocus: handleFocus,\n    children: [/*#__PURE__*/_jsx(ContentComponent, _extends({\n      ref: contentRef,\n      classes: {\n        root: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        focused: classes.focused,\n        disabled: classes.disabled,\n        iconContainer: classes.iconContainer,\n        label: classes.label\n      },\n      label: label,\n      nodeId: nodeId,\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      icon: icon,\n      expansionIcon: expansionIcon,\n      displayIcon: displayIcon\n    }, ContentProps)), children && /*#__PURE__*/_jsx(DescendantProvider, {\n      id: nodeId,\n      children: /*#__PURE__*/_jsx(TransitionComponent, _extends({\n        unmountOnExit: true,\n        className: classes.group,\n        in: expanded,\n        component: \"ul\",\n        role: \"group\"\n      }, TransitionProps, {\n        children: children\n      }))\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n\n  /**\n   * The component used for the content node.\n   * @default TreeItemContent\n   */\n  ContentComponent: elementTypeAcceptingRef,\n\n  /**\n   * Props applied to ContentComponent\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the node is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * This prop isn't supported.\n   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.\n   */\n  onFocus: unsupportedProp,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTreeItem'\n})(TreeItem);"]},"metadata":{},"sourceType":"module"}