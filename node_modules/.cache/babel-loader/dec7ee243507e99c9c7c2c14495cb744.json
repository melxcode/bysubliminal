{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  const {\n    disableCloseOnSelect,\n    disabled,\n    inputFormat,\n    onAccept,\n    onChange,\n    readOnly,\n    value\n  } = props;\n\n  if (!inputFormat) {\n    throw new Error('inputFormat prop is required');\n  }\n\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  } // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => setIsOpen(false),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, setIsOpen, valueManager.emptyValue]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect !== null && disableCloseOnSelect !== void 0 ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    inputFormat,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => !readOnly && !disabled && setIsOpen(true)\n  }), [onChange, inputFormat, isOpen, value, readOnly, disabled, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n}","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/internal/pickers/hooks/usePickerState.js"],"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","disableCloseOnSelect","disabled","inputFormat","onAccept","onChange","readOnly","value","Error","utils","isOpen","setIsOpen","initDraftableDate","date","committed","draft","parsedDateValue","parseInput","draftState","dispatch","useReducer","state","action","type","payload","areValuesEqual","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","useState","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","useMemo","open","onClear","emptyValue","onDismiss","onSetToday","now","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","shouldCloseOnSelect","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","pickerDraft","other"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  const {\n    disableCloseOnSelect,\n    disabled,\n    inputFormat,\n    onAccept,\n    onChange,\n    readOnly,\n    value\n  } = props;\n\n  if (!inputFormat) {\n    throw new Error('inputFormat prop is required');\n  }\n\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  } // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => setIsOpen(false),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, setIsOpen, valueManager.emptyValue]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect !== null && disableCloseOnSelect !== void 0 ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    inputFormat,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => !readOnly && !disabled && setIsOpen(true)\n  }), [onChange, inputFormat, isOpen, value, readOnly, disabled, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n}"]},"metadata":{},"sourceType":"module"}