{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@material-ui/core/Tabs';\nimport { useTabContext, getTabId, getPanelId } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n    children: childrenProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\"]);\n\n  const context = useTabContext();\n\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n\n  const children = React.Children.map(childrenProp, child => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, _extends({}, other, {\n    ref: ref,\n    value: context.value,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.arrayOf(PropTypes.element)\n} : void 0;\nexport default TabList;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/TabList/TabList.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Tabs","useTabContext","getTabId","getPanelId","jsx","_jsx","TabList","forwardRef","props","ref","children","childrenProp","other","context","TypeError","Children","map","child","cloneElement","value","id","process","env","NODE_ENV","propTypes","arrayOf","element"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,UAAlC,QAAoD,eAApD;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,OAAO,GAAG,aAAaR,KAAK,CAACS,UAAN,CAAiB,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,GAAxB,EAA6B;AACzE,QAAM;AACJC,IAAAA,QAAQ,EAAEC;AADN,MAEFH,KAFJ;AAAA,QAGMI,KAAK,GAAGf,6BAA6B,CAACW,KAAD,EAAQ,CAAC,UAAD,CAAR,CAH3C;;AAKA,QAAMK,OAAO,GAAGZ,aAAa,EAA7B;;AAEA,MAAIY,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM,IAAIC,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED,QAAMJ,QAAQ,GAAGZ,KAAK,CAACiB,QAAN,CAAeC,GAAf,CAAmBL,YAAnB,EAAiCM,KAAK,IAAI;AACzD,WAAO,aAAanB,KAAK,CAACoB,YAAN,CAAmBD,KAAnB,EAA0B;AAC5C;AACA,uBAAiBd,UAAU,CAACU,OAAD,EAAUI,KAAK,CAACT,KAAN,CAAYW,KAAtB,CAFiB;AAG5CC,MAAAA,EAAE,EAAElB,QAAQ,CAACW,OAAD,EAAUI,KAAK,CAACT,KAAN,CAAYW,KAAtB;AAHgC,KAA1B,CAApB;AAKD,GANgB,CAAjB;AAOA,SAAO,aAAad,IAAI,CAACL,IAAD,EAAOJ,QAAQ,CAAC,EAAD,EAAKgB,KAAL,EAAY;AACjDH,IAAAA,GAAG,EAAEA,GAD4C;AAEjDU,IAAAA,KAAK,EAAEN,OAAO,CAACM,KAFkC;AAGjDT,IAAAA,QAAQ,EAAEA;AAHuC,GAAZ,CAAf,CAAxB;AAKD,CAxB4B,CAA7B;AAyBAW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,OAAO,CAACkB;AAChD;AADwC,EAEtC;AACA;AACA;AACA;AACA;;AAEA;AACF;AACA;AACEd,EAAAA,QAAQ,EAAEX,SAAS,CAAC0B,OAAV,CAAkB1B,SAAS,CAAC2B,OAA5B;AATV,CAFF,GAYI,KAAK,CAZT;AAaA,eAAepB,OAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@material-ui/core/Tabs';\nimport { useTabContext, getTabId, getPanelId } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {\n  const {\n    children: childrenProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\"]);\n\n  const context = useTabContext();\n\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n\n  const children = React.Children.map(childrenProp, child => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      // SOMEDAY: `Tabs` will set those themselves\n      'aria-controls': getPanelId(context, child.props.value),\n      id: getTabId(context, child.props.value)\n    });\n  });\n  return /*#__PURE__*/_jsx(Tabs, _extends({}, other, {\n    ref: ref,\n    value: context.value,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabList.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A list of `<Tab />` elements.\n   */\n  children: PropTypes.arrayOf(PropTypes.element)\n} : void 0;\nexport default TabList;"]},"metadata":{},"sourceType":"module"}