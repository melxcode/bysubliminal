{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport useTreeItem from './useTreeItem';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TreeItemContent = /*#__PURE__*/React.forwardRef(function TreeItemContent(props, ref) {\n  const {\n    classes,\n    displayIcon,\n    expansionIcon,\n    icon: iconProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"displayIcon\", \"expansionIcon\", \"icon\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\"]);\n\n  const {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  } = useTreeItem(nodeId);\n  const icon = iconProp || expansionIcon || displayIcon;\n\n  const handleMouseDown = event => {\n    preventSelection(event);\n\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  };\n\n  const handleClick = event => {\n    handleExpansion(event);\n    handleSelection(event);\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */\n    _jsxs(\"div\", _extends({\n      className: clsx(classes.root, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled),\n      onClick: handleClick,\n      onMouseDown: handleMouseDown,\n      ref: ref\n    }, other, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: classes.iconContainer,\n        children: icon\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classes.label,\n        children: label\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItemContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The icon to display next to the tree node's label. Either a parent or end icon.\n   */\n  displayIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label. Either an expansion or collapse icon.\n   */\n  expansionIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func\n} : void 0;\nexport default TreeItemContent;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/TreeItem/TreeItemContent.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","clsx","PropTypes","useTreeItem","jsx","_jsx","jsxs","_jsxs","TreeItemContent","forwardRef","props","ref","classes","displayIcon","expansionIcon","icon","iconProp","label","nodeId","onClick","onMouseDown","other","disabled","expanded","selected","focused","handleExpansion","handleSelection","preventSelection","handleMouseDown","event","handleClick","className","root","children","iconContainer","process","env","NODE_ENV","propTypes","object","node","string","isRequired","func"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport useTreeItem from './useTreeItem';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TreeItemContent = /*#__PURE__*/React.forwardRef(function TreeItemContent(props, ref) {\n  const {\n    classes,\n    displayIcon,\n    expansionIcon,\n    icon: iconProp,\n    label,\n    nodeId,\n    onClick,\n    onMouseDown\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"displayIcon\", \"expansionIcon\", \"icon\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\"]);\n\n  const {\n    disabled,\n    expanded,\n    selected,\n    focused,\n    handleExpansion,\n    handleSelection,\n    preventSelection\n  } = useTreeItem(nodeId);\n  const icon = iconProp || expansionIcon || displayIcon;\n\n  const handleMouseDown = event => {\n    preventSelection(event);\n\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n  };\n\n  const handleClick = event => {\n    handleExpansion(event);\n    handleSelection(event);\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions -- Key event is handled by the TreeView */\n    _jsxs(\"div\", _extends({\n      className: clsx(classes.root, expanded && classes.expanded, selected && classes.selected, focused && classes.focused, disabled && classes.disabled),\n      onClick: handleClick,\n      onMouseDown: handleMouseDown,\n      ref: ref\n    }, other, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: classes.iconContainer,\n        children: icon\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: classes.label,\n        children: label\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItemContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The icon to display next to the tree node's label. Either a parent or end icon.\n   */\n  displayIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label. Either an expansion or collapse icon.\n   */\n  expansionIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func\n} : void 0;\nexport default TreeItemContent;"]},"metadata":{},"sourceType":"module"}