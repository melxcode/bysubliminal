{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport StaticWrapper from '../internal/pickers/wrappers/StaticWrapper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { makeValidationHook } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue, validateDateRange } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useDateRangeValidation = makeValidationHook(validateDateRange, {\n  isSameError: (a, b) => b !== null && a[1] === b[1] && a[0] === b[0]\n});\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://material-ui.com/api/static-date-range-picker/)\n */\n\nconst StaticDateRangePicker = /*#__PURE__*/React.forwardRef(function StaticDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiStaticDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp = defaultMinDate,\n    maxDate: maxDateProp = defaultMaxDate\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"]);\n\n  const utils = useUtils();\n  const minDate = useParsedDate(minDateProp);\n  const maxDate = useParsedDate(maxDateProp);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(value, restProps);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(StaticWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default \"static\"\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"–\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default StaticDateRangePicker;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/StaticDateRangePicker/StaticDateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","unstable_useThemeProps","useThemeProps","StaticWrapper","useUtils","useParsedDate","defaultMinDate","defaultMaxDate","makeValidationHook","usePickerState","DateRangePickerView","DateRangePickerInput","parseRangeInputValue","validateDateRange","jsx","_jsx","useDateRangeValidation","isSameError","a","b","KeyboardDateInputComponent","PureDateInputComponent","rangePickerValueManager","emptyValue","parseInput","areValuesEqual","utils","isEqual","StaticDateRangePicker","forwardRef","inProps","ref","props","name","calendars","value","onChange","mask","startText","endText","inputFormat","passedInputFormat","minDate","minDateProp","maxDate","maxDateProp","other","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","formats","keyboardDate","restProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowKeyboardControl","bool","allowSameDateSelection","oneOf","node","className","string","components","shape","LeftArrowButton","elementType","LeftArrowIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","disableAutoMonthSwitching","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","displayStaticWrapperAs","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","InputProps","inputRef","oneOfType","current","key","number","label","leftArrowButtonText","loading","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","openPickerIcon","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","arrayOf","Date"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport StaticWrapper from '../internal/pickers/wrappers/StaticWrapper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { makeValidationHook } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue, validateDateRange } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useDateRangeValidation = makeValidationHook(validateDateRange, {\n  isSameError: (a, b) => b !== null && a[1] === b[1] && a[0] === b[0]\n});\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://material-ui.com/api/static-date-range-picker/)\n */\nconst StaticDateRangePicker = /*#__PURE__*/React.forwardRef(function StaticDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiStaticDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp = defaultMinDate,\n    maxDate: maxDateProp = defaultMaxDate\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"]);\n\n  const utils = useUtils();\n  const minDate = useParsedDate(minDateProp);\n  const maxDate = useParsedDate(maxDateProp);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(value, restProps);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(StaticWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default \"static\"\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"–\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default StaticDateRangePicker;"]},"metadata":{},"sourceType":"module"}