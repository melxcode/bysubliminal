{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError\n}) {\n  const utils = useUtils();\n  const isFocusedRef = React.useRef(false);\n  const getInputValue = React.useCallback(() => getDisplayDate(utils, rawValue, inputFormat), [inputFormat, rawValue, utils]);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(getInputValue());\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]);\n  React.useEffect(() => {\n    // We do not need to update the input value on keystroke\n    // Because library formatters can change inputs from 12/12/2 to 12/12/0002\n    if ((rawValue === null || utils.isValid(rawValue)) && !isFocusedRef.current) {\n      setInnerInputValue(getInputValue());\n    }\n  }, [utils, getInputValue, rawValue]);\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    helperText: formatHelperText,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        isFocusedRef.current = true;\n      }, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        isFocusedRef.current = false;\n      }, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/internal/pickers/hooks/useMaskedInput.js"],"names":["_extends","React","useRifm","useUtils","createDelegatedEventHandler","maskedDateFormatter","getDisplayDate","checkMaskIsValidForCurrentFormat","useMaskedInput","acceptRegex","disabled","disableMaskedInput","ignoreInvalidInputs","inputFormat","inputProps","label","mask","onChange","rawValue","readOnly","rifmFormatter","TextFieldProps","validationError","utils","isFocusedRef","useRef","getInputValue","useCallback","formatHelperText","getFormatHelperText","innerInputValue","setInnerInputValue","useState","shouldUseMaskedInput","useMemo","formatter","st","useEffect","isValid","current","handleChange","text","finalString","date","parse","undefined","rifmProps","value","format","inputStateArgs","event","currentTarget","error","helperText","placeholder","type","onFocus","onBlur"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError\n}) {\n  const utils = useUtils();\n  const isFocusedRef = React.useRef(false);\n  const getInputValue = React.useCallback(() => getDisplayDate(utils, rawValue, inputFormat), [inputFormat, rawValue, utils]);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(getInputValue());\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]);\n  React.useEffect(() => {\n    // We do not need to update the input value on keystroke\n    // Because library formatters can change inputs from 12/12/2 to 12/12/0002\n    if ((rawValue === null || utils.isValid(rawValue)) && !isFocusedRef.current) {\n      setInnerInputValue(getInputValue());\n    }\n  }, [utils, getInputValue, rawValue]);\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    helperText: formatHelperText,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        isFocusedRef.current = true;\n      }, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        isFocusedRef.current = false;\n      }, inputProps === null || inputProps === void 0 ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;"]},"metadata":{},"sourceType":"module"}