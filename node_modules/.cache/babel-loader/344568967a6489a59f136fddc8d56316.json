{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport TrapFocus from '@material-ui/core/Unstable_TrapFocus';\nimport { useForkRef, useEventCallback, ownerDocument } from '@material-ui/core/utils';\nimport { withStyles } from '@material-ui/core/styles';\nimport { useGlobalKeyDown, keycode } from './hooks/useKeyDown';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const styles = theme => ({\n  root: {\n    zIndex: theme.zIndex.modal\n  },\n  paper: {\n    transformOrigin: 'top center',\n    outline: 0\n  },\n  topTransition: {\n    transformOrigin: 'bottom center'\n  }\n});\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Based on @material-ui/core/ClickAwayListener without the customization.\n * We can probably strip away even more since children won't be portaled.\n *\n * @param onClickAway\n * @param onClick\n * @param onTouchStart\n */\n\n\nfunction useClickAwayListener(active, onClickAway) {\n  const movedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  React.useEffect(() => {\n    if (!active) {\n      return undefined;\n    }\n\n    function handleClickCapture() {\n      activatedRef.current = true;\n    }\n\n    document.addEventListener('click', handleClickCapture, {\n      capture: true,\n      once: true\n    });\n    return () => {\n      activatedRef.current = false;\n      document.removeEventListener('click', handleClickCapture, {\n        capture: true\n      });\n    };\n  }, [active]); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  const handleClickAway = useEventCallback(event => {\n    if (!activatedRef.current) {\n      return;\n    } // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n\n\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!nodeRef.current || // is a TouchEvent?\n    'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && !insideReactTree) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  const handleSynthetic = () => {\n    syntheticEventRef.current = true;\n  };\n\n  React.useEffect(() => {\n    if (active) {\n      const doc = ownerDocument(nodeRef.current);\n\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener('touchstart', handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener('touchstart', handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [active, handleClickAway]);\n  React.useEffect(() => {\n    // TODO This behavior is not tested automatically\n    // It's unclear whether this is due to different update semantics in test (batched in act() vs discrete on click).\n    // Or if this is a timing related issues due to different Transition components\n    // Once we get rid of all the manual scheduling (e.g. setTimeout(update, 0)) we can revisit this code+test.\n    if (active) {\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener('click', handleClickAway);\n      return () => {\n        doc.removeEventListener('click', handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [active, handleClickAway]);\n  return [nodeRef, handleSynthetic, handleSynthetic];\n}\n\nconst PickersPopper = props => {\n  const {\n    anchorEl,\n    children,\n    classes,\n    containerRef = null,\n    onClose,\n    open,\n    PopperProps,\n    role,\n    TransitionComponent = Grow,\n    TrapFocusProps\n  } = props;\n  useGlobalKeyDown(open, {\n    [keycode.Esc]: onClose\n  });\n  const lastFocusedElementRef = React.useRef(null);\n  React.useEffect(() => {\n    if (role === 'tooltip') {\n      return;\n    }\n\n    if (open) {\n      lastFocusedElementRef.current = document.activeElement;\n    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {\n      lastFocusedElementRef.current.focus();\n    }\n  }, [open, role]);\n  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onClose);\n  const paperRef = React.useRef(null);\n  const handleRef = useForkRef(paperRef, containerRef);\n  const handlePaperRef = useForkRef(handleRef, clickAwayRef);\n  return /*#__PURE__*/_jsx(Popper, _extends({\n    transition: true,\n    role: role,\n    open: open,\n    anchorEl: anchorEl,\n    className: clsx(classes.root, PopperProps === null || PopperProps === void 0 ? void 0 : PopperProps.className)\n  }, PopperProps, {\n    children: ({\n      TransitionProps,\n      placement\n    }) => /*#__PURE__*/_jsx(TrapFocus, _extends({\n      open: open,\n      disableAutoFocus: true,\n      disableEnforceFocus: role === 'tooltip',\n      isEnabled: () => true,\n      getDoc: () => {\n        var _paperRef$current$own, _paperRef$current;\n\n        return (_paperRef$current$own = (_paperRef$current = paperRef.current) === null || _paperRef$current === void 0 ? void 0 : _paperRef$current.ownerDocument) !== null && _paperRef$current$own !== void 0 ? _paperRef$current$own : document;\n      }\n    }, TrapFocusProps, {\n      children: /*#__PURE__*/_jsx(TransitionComponent, _extends({}, TransitionProps, {\n        children: /*#__PURE__*/_jsx(Paper, {\n          tabIndex: -1,\n          elevation: 8,\n          ref: handlePaperRef,\n          className: clsx(classes.paper, placement === 'top' && classes.topTransition),\n          onClick: onPaperClick,\n          onTouchStart: onPaperTouchStart,\n          children: children\n        })\n      }))\n    }))\n  }));\n};\n\nexport default withStyles(styles, {\n  name: 'MuiPickersPopper'\n})(PickersPopper);","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/internal/pickers/PickersPopper.js"],"names":["_extends","React","clsx","Grow","Paper","Popper","TrapFocus","useForkRef","useEventCallback","ownerDocument","withStyles","useGlobalKeyDown","keycode","jsx","_jsx","styles","theme","root","zIndex","modal","paper","transformOrigin","outline","topTransition","clickedRootScrollbar","event","doc","documentElement","clientWidth","clientX","clientHeight","clientY","useClickAwayListener","active","onClickAway","movedRef","useRef","syntheticEventRef","nodeRef","activatedRef","useEffect","undefined","handleClickCapture","current","document","addEventListener","capture","once","removeEventListener","handleClickAway","insideReactTree","insideDOM","composedPath","indexOf","contains","target","handleSynthetic","handleTouchMove","PickersPopper","props","anchorEl","children","classes","containerRef","onClose","open","PopperProps","role","TransitionComponent","TrapFocusProps","Esc","lastFocusedElementRef","activeElement","HTMLElement","focus","clickAwayRef","onPaperClick","onPaperTouchStart","paperRef","handleRef","handlePaperRef","transition","className","TransitionProps","placement","disableAutoFocus","disableEnforceFocus","isEnabled","getDoc","_paperRef$current$own","_paperRef$current","tabIndex","elevation","ref","onClick","onTouchStart","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport TrapFocus from '@material-ui/core/Unstable_TrapFocus';\nimport { useForkRef, useEventCallback, ownerDocument } from '@material-ui/core/utils';\nimport { withStyles } from '@material-ui/core/styles';\nimport { useGlobalKeyDown, keycode } from './hooks/useKeyDown';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const styles = theme => ({\n  root: {\n    zIndex: theme.zIndex.modal\n  },\n  paper: {\n    transformOrigin: 'top center',\n    outline: 0\n  },\n  topTransition: {\n    transformOrigin: 'bottom center'\n  }\n});\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Based on @material-ui/core/ClickAwayListener without the customization.\n * We can probably strip away even more since children won't be portaled.\n *\n * @param onClickAway\n * @param onClick\n * @param onTouchStart\n */\n\n\nfunction useClickAwayListener(active, onClickAway) {\n  const movedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  React.useEffect(() => {\n    if (!active) {\n      return undefined;\n    }\n\n    function handleClickCapture() {\n      activatedRef.current = true;\n    }\n\n    document.addEventListener('click', handleClickCapture, {\n      capture: true,\n      once: true\n    });\n    return () => {\n      activatedRef.current = false;\n      document.removeEventListener('click', handleClickCapture, {\n        capture: true\n      });\n    };\n  }, [active]); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  const handleClickAway = useEventCallback(event => {\n    if (!activatedRef.current) {\n      return;\n    } // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n\n\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!nodeRef.current || // is a TouchEvent?\n    'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && !insideReactTree) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  const handleSynthetic = () => {\n    syntheticEventRef.current = true;\n  };\n\n  React.useEffect(() => {\n    if (active) {\n      const doc = ownerDocument(nodeRef.current);\n\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener('touchstart', handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener('touchstart', handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [active, handleClickAway]);\n  React.useEffect(() => {\n    // TODO This behavior is not tested automatically\n    // It's unclear whether this is due to different update semantics in test (batched in act() vs discrete on click).\n    // Or if this is a timing related issues due to different Transition components\n    // Once we get rid of all the manual scheduling (e.g. setTimeout(update, 0)) we can revisit this code+test.\n    if (active) {\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener('click', handleClickAway);\n      return () => {\n        doc.removeEventListener('click', handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [active, handleClickAway]);\n  return [nodeRef, handleSynthetic, handleSynthetic];\n}\n\nconst PickersPopper = props => {\n  const {\n    anchorEl,\n    children,\n    classes,\n    containerRef = null,\n    onClose,\n    open,\n    PopperProps,\n    role,\n    TransitionComponent = Grow,\n    TrapFocusProps\n  } = props;\n  useGlobalKeyDown(open, {\n    [keycode.Esc]: onClose\n  });\n  const lastFocusedElementRef = React.useRef(null);\n  React.useEffect(() => {\n    if (role === 'tooltip') {\n      return;\n    }\n\n    if (open) {\n      lastFocusedElementRef.current = document.activeElement;\n    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {\n      lastFocusedElementRef.current.focus();\n    }\n  }, [open, role]);\n  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onClose);\n  const paperRef = React.useRef(null);\n  const handleRef = useForkRef(paperRef, containerRef);\n  const handlePaperRef = useForkRef(handleRef, clickAwayRef);\n  return /*#__PURE__*/_jsx(Popper, _extends({\n    transition: true,\n    role: role,\n    open: open,\n    anchorEl: anchorEl,\n    className: clsx(classes.root, PopperProps === null || PopperProps === void 0 ? void 0 : PopperProps.className)\n  }, PopperProps, {\n    children: ({\n      TransitionProps,\n      placement\n    }) => /*#__PURE__*/_jsx(TrapFocus, _extends({\n      open: open,\n      disableAutoFocus: true,\n      disableEnforceFocus: role === 'tooltip',\n      isEnabled: () => true,\n      getDoc: () => {\n        var _paperRef$current$own, _paperRef$current;\n\n        return (_paperRef$current$own = (_paperRef$current = paperRef.current) === null || _paperRef$current === void 0 ? void 0 : _paperRef$current.ownerDocument) !== null && _paperRef$current$own !== void 0 ? _paperRef$current$own : document;\n      }\n    }, TrapFocusProps, {\n      children: /*#__PURE__*/_jsx(TransitionComponent, _extends({}, TransitionProps, {\n        children: /*#__PURE__*/_jsx(Paper, {\n          tabIndex: -1,\n          elevation: 8,\n          ref: handlePaperRef,\n          className: clsx(classes.paper, placement === 'top' && classes.topTransition),\n          onClick: onPaperClick,\n          onTouchStart: onPaperTouchStart,\n          children: children\n        })\n      }))\n    }))\n  }));\n};\n\nexport default withStyles(styles, {\n  name: 'MuiPickersPopper'\n})(PickersPopper);"]},"metadata":{},"sourceType":"module"}