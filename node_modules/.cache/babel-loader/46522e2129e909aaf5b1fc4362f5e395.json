{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { experimentalStyled, unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => styles.root || {};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTabPanelUtilityClass, classes);\n};\n\nconst TabPanelRoot = experimentalStyled('div', {}, {\n  name: 'MuiTabPanel',\n  slot: 'root',\n  overridesResolver\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(3)\n}));\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTabPanel'\n  });\n\n  const {\n    children,\n    className,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"value\"]);\n\n  const styleProps = _extends({}, props);\n\n  const classes = useUtilityClasses(styleProps);\n  const context = useTabContext();\n\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n\n  const id = getPanelId(context, value);\n  const tabId = getTabId(context, value);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({\n    \"aria-labelledby\": tabId,\n    className: clsx(classes.root, className),\n    hidden: value !== context.value,\n    id: id,\n    ref: ref,\n    role: \"tabpanel\",\n    styleProps: styleProps\n  }, other, {\n    children: value === context.value && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\n   * no `value` was passed to `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\nexport default TabPanel;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/node_modules/@material-ui/lab/TabPanel/TabPanel.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","experimentalStyled","unstable_useThemeProps","useThemeProps","unstable_composeClasses","composeClasses","getTabPanelUtilityClass","getPanelId","getTabId","useTabContext","jsx","_jsx","overridesResolver","props","styles","root","useUtilityClasses","styleProps","classes","slots","TabPanelRoot","name","slot","theme","padding","spacing","TabPanel","forwardRef","inProps","ref","children","className","value","other","context","TypeError","id","tabId","hidden","role","process","env","NODE_ENV","propTypes","node","object","string","sx","isRequired"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { experimentalStyled, unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { getTabPanelUtilityClass } from './tabPanelClasses';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst overridesResolver = (props, styles) => styles.root || {};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTabPanelUtilityClass, classes);\n};\n\nconst TabPanelRoot = experimentalStyled('div', {}, {\n  name: 'MuiTabPanel',\n  slot: 'root',\n  overridesResolver\n})(({\n  theme\n}) => ({\n  padding: theme.spacing(3)\n}));\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTabPanel'\n  });\n\n  const {\n    children,\n    className,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"value\"]);\n\n  const styleProps = _extends({}, props);\n\n  const classes = useUtilityClasses(styleProps);\n  const context = useTabContext();\n\n  if (context === null) {\n    throw new TypeError('No TabContext provided');\n  }\n\n  const id = getPanelId(context, value);\n  const tabId = getTabId(context, value);\n  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({\n    \"aria-labelledby\": tabId,\n    className: clsx(classes.root, className),\n    hidden: value !== context.value,\n    id: id,\n    ref: ref,\n    role: \"tabpanel\",\n    styleProps: styleProps\n  }, other, {\n    children: value === context.value && children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `value` of the corresponding `Tab`. Must use the index of the `Tab` when\n   * no `value` was passed to `Tab`.\n   */\n  value: PropTypes.string.isRequired\n} : void 0;\nexport default TabPanel;"]},"metadata":{},"sourceType":"module"}