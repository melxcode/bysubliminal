{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // redux\n\nimport { switchMode, switchDirection } from '../redux/slices/settings'; // ----------------------------------------------------------------------\n\nexport default function useSettings() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    themeMode,\n    themeDirection\n  } = useSelector(state => state.settings);\n  const isLight = themeMode === 'light';\n  const handleToggleTheme = useCallback(() => dispatch(switchMode(isLight ? 'dark' : 'light')), [dispatch, isLight]);\n  const handleChangeTheme = useCallback(event => dispatch(switchMode(event.target.value)), [dispatch]);\n  const handleChangeDirection = useCallback(event => dispatch(switchDirection(event.target.value)), [dispatch]);\n  return {\n    // Mode\n    themeMode,\n    toggleMode: handleToggleTheme,\n    selectMode: handleChangeTheme,\n    // Direction\n    themeDirection,\n    selectDirection: handleChangeDirection\n  };\n}\n\n_s(useSettings, \"9hr+cJkTgmUdCpZTnC4v4Sec2f4=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["C:/Users/Usuario/Documents/react/website/src/hooks/useSettings.js"],"names":["useCallback","useDispatch","useSelector","switchMode","switchDirection","useSettings","dispatch","themeMode","themeDirection","state","settings","isLight","handleToggleTheme","handleChangeTheme","event","target","value","handleChangeDirection","toggleMode","selectMode","selectDirection"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,0BAA5C,C,CAEA;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAAEM,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAgCN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAAjD;AACA,QAAMC,OAAO,GAAGJ,SAAS,KAAK,OAA9B;AAEA,QAAMK,iBAAiB,GAAGZ,WAAW,CACnC,MAAMM,QAAQ,CAACH,UAAU,CAACQ,OAAO,GAAG,MAAH,GAAY,OAApB,CAAX,CADqB,EAEnC,CAACL,QAAD,EAAWK,OAAX,CAFmC,CAArC;AAKA,QAAME,iBAAiB,GAAGb,WAAW,CAClCc,KAAD,IAAWR,QAAQ,CAACH,UAAU,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX,CADgB,EAEnC,CAACV,QAAD,CAFmC,CAArC;AAKA,QAAMW,qBAAqB,GAAGjB,WAAW,CACtCc,KAAD,IAAWR,QAAQ,CAACF,eAAe,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB,CADoB,EAEvC,CAACV,QAAD,CAFuC,CAAzC;AAKA,SAAO;AACL;AACAC,IAAAA,SAFK;AAGLW,IAAAA,UAAU,EAAEN,iBAHP;AAILO,IAAAA,UAAU,EAAEN,iBAJP;AAKL;AACAL,IAAAA,cANK;AAOLY,IAAAA,eAAe,EAAEH;AAPZ,GAAP;AASD;;GA7BuBZ,W;UACLJ,W,EACqBC,W","sourcesContent":["import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// redux\nimport { switchMode, switchDirection } from '../redux/slices/settings';\n\n// ----------------------------------------------------------------------\n\nexport default function useSettings() {\n  const dispatch = useDispatch();\n  const { themeMode, themeDirection } = useSelector((state) => state.settings);\n  const isLight = themeMode === 'light';\n\n  const handleToggleTheme = useCallback(\n    () => dispatch(switchMode(isLight ? 'dark' : 'light')),\n    [dispatch, isLight]\n  );\n\n  const handleChangeTheme = useCallback(\n    (event) => dispatch(switchMode(event.target.value)),\n    [dispatch]\n  );\n\n  const handleChangeDirection = useCallback(\n    (event) => dispatch(switchDirection(event.target.value)),\n    [dispatch]\n  );\n\n  return {\n    // Mode\n    themeMode,\n    toggleMode: handleToggleTheme,\n    selectMode: handleChangeTheme,\n    // Direction\n    themeDirection,\n    selectDirection: handleChangeDirection\n  };\n}\n"]},"metadata":{},"sourceType":"module"}